:py:mod:`preprocess.raw_data_functions`
=======================================

.. py:module:: preprocess.raw_data_functions


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   preprocess.raw_data_functions.prepare_data_files
   preprocess.raw_data_functions.check_genotype_h5_file
   preprocess.raw_data_functions.check_index_file
   preprocess.raw_data_functions.save_all_data_files
   preprocess.raw_data_functions.check_transform_format_genotype_matrix
   preprocess.raw_data_functions.check_genotype_csv_file
   preprocess.raw_data_functions.check_genotype_binary_plink_file
   preprocess.raw_data_functions.check_genotype_plink_file
   preprocess.raw_data_functions.create_genotype_h5_file
   preprocess.raw_data_functions.check_and_load_phenotype_matrix
   preprocess.raw_data_functions.genotype_phenotype_matching
   preprocess.raw_data_functions.get_matched_data
   preprocess.raw_data_functions.append_index_file
   preprocess.raw_data_functions.create_index_file
   preprocess.raw_data_functions.filter_non_informative_snps
   preprocess.raw_data_functions.get_minor_allele_freq
   preprocess.raw_data_functions.create_maf_filter
   preprocess.raw_data_functions.check_datasplit_user_input
   preprocess.raw_data_functions.check_train_test_splits
   preprocess.raw_data_functions.make_bins
   preprocess.raw_data_functions.make_nested_cv
   preprocess.raw_data_functions.make_stratified_cv
   preprocess.raw_data_functions.make_train_test_split



.. py:function:: prepare_data_files(data_dir, genotype_matrix_name, phenotype_matrix_name, phenotype, datasplit, n_outerfolds, n_innerfolds, test_set_size_percentage, val_set_size_percentage, models, user_encoding, maf_percentage)

   Prepare all data files for a common format: genotype matrix, phenotype matrix and index file.

   First check if genotype file is .h5 file (standard format of this framework):
       YES:    First check if all required information is present in the file, raise Exception if not.
               Then check if index file exists:
                   NO: Load genotype and create all required index files
                   YES: Append all required data splits and maf-filters to index file
       NO:     Load genotype and create all required files
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param phenotype_matrix_name: name of the phenotype matrix including datatype ending
   :param phenotype: name of the phenotype to predict
   :param datasplit: datasplit to use. Options are: nested-cv, cv-test, train-val-test
   :param n_outerfolds: number of outerfolds relevant for nested-cv
   :param n_innerfolds: number of folds relevant for nested-cv and cv-test
   :param test_set_size_percentage: size of the test set relevant for cv-test and train-val-test
   :param val_set_size_percentage: size of the validation set relevant for train-val-test
   :param models: models to consider
   :param user_encoding: encoding specified by the user
   :param maf_percentage: threshold for MAF filter as percentage value


.. py:function:: check_genotype_h5_file(data_dir, genotype_matrix_name, encodings)

   Check .h5 genotype file.
   Should contain:
       sample_ids: vector with sample names of genotype matrix,
       snp_ids: vector with SNP identifiers of genotype matrix,
       X_{enc}: (samples x SNPs)-genotype matrix in enc encoding, where enc might refer to:
                   '012': additive (number of minor alleles)
                   'raw': raw (alleles)
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the phenotype matrix including datatype ending
   :param encodings: list of needed encodings


.. py:function:: check_index_file(data_dir, genotype_matrix_name, phenotype_matrix_name, phenotype)

   Check if index file is available and if the datasets 'y', 'matched_sample_ids', 'X_index', 'y_index' and
   'ma_frequency' exist.
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param phenotype_matrix_name: name of the phenotype matrix including datatype ending
   :param phenotype: name of the phenotype to predict
   :return: bool reflecting check result


.. py:function:: save_all_data_files(data_dir, genotype_matrix_name, phenotype_matrix_name, phenotype, models, user_encoding, maf_percentage, datasplit, n_outerfolds, n_innerfolds, test_set_size_percentage, val_set_size_percentage)

   Prepare and save all required data files:
       - genotype matrix in unified format as .h5 file with,
       - phenotype matrix in unified format as .csv file,
       - file containing maf filter and data split indices as .h5
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param phenotype_matrix_name: name of the phenotype matrix including datatype ending
   :param phenotype: name of the phenotype to predict
   :param models: models to consider
   :param user_encoding: encoding specified by the user
   :param maf_percentage: threshold for MAF filter as percentage value
   :param datasplit: datasplit to use. Options are: nested-cv, cv-test, train-val-test
   :param n_outerfolds: number of outerfolds relevant for nested-cv
   :param n_innerfolds: number of folds relevant for nested-cv and cv-test
   :param test_set_size_percentage: size of the test set relevant for cv-test and train-val-test
   :param val_set_size_percentage: size of the validation set relevant for train-val-test


.. py:function:: check_transform_format_genotype_matrix(data_dir, genotype_matrix_name, models, user_encoding)

   Check the format of the specified genotype matrix.
   Unified genotype matrix will be saved in subdirectory data and named NAME_OF_GENOTYPE_MATRIX.h5
   Unified format of the .h5 file of the genotype matrix required for the further processes:
   mandatory:  sample_ids: vector with sample names of genotype matrix,
               SNP_ids: vector with SNP identifiers of genotype matrix,
               X_{enc}: (samples x SNPs)-genotype matrix in enc encoding, where enc might refer to:
                   '012': additive (number of minor alleles)
                   'raw': raw  (alleles)
   optional:   genotype in additional encodings
   Accepts .h5, .hdf5, .h5py, .csv, PLINK binary and PLINK files. .h5, .hdf5, .h5py files must satisfy the unified
   format. If the genotype matrix contains constant SNPs, those will be removed and a new file will be saved.
   Will open .csv, PLINK and binary PLINK files and generate required .h5 format.
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param models: models to consider
   :param user_encoding: encoding specified by the user
   :return: genotype matrix (raw encoded if present, 012 encoded otherwise) and sample ids


.. py:function:: check_genotype_csv_file(data_dir, genotype_matrix_name, encodings)

   Load .csv genotype file. File must have the following structure:
   First column must contain the sample ids, the column names should be the SNP ids.
   The values should be the genotype matrix either in additive encoding or in raw encoding.
   If the genotype is in raw encoding, additive encoding will be calculated.
   If genotype is in additive encoding, only this encoding will be returned
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param encodings: list of needed encodings
   :return: sample ids, SNP ids and genotype in additive / raw encoding (if available)


.. py:function:: check_genotype_binary_plink_file(data_dir, genotype_matrix_name)

   Load binary PLINK file, .bim, .fam, .bed files with same prefix need to be in same folder.
   Compute additive and raw encoding of genotype
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :return: sample ids, SNP ids and genotype in raw encoding


.. py:function:: check_genotype_plink_file(data_dir, genotype_matrix_name)

   Load PLINK files, .map and .ped file with same prefix need to be in same folder.
   Accepts GENOTYPENAME.ped and GENOTYPENAME.map as input
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :return: sample ids, SNP ids and genotype in raw encoding


.. py:function:: create_genotype_h5_file(data_dir, genotype_matrix_name, sample_ids, snp_ids, X)

   Save genotype matrix in unified .h5 file.
   Structure:
               sample_ids
               snp_ids
               X_raw (or X_012 if X_raw not available)
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param sample_ids: array containing sample ids of genotype data
   :param snp_ids: array containing snp ids of genotype data
   :param X: matrix containing genotype either in raw or in additive encoding


.. py:function:: check_and_load_phenotype_matrix(data_dir, phenotype_matrix_name, phenotype)

   Check and load the specified phenotype matrix. Only accept .csv, .pheno, .txt files.
   Sample ids need to be in first column, remaining columns should contain phenotypic values
   with phenotype name as column name
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param phenotype_matrix_name: name of the phenotype matrix including datatype ending
   :param phenotype: name of the phenotype to predict
   :return: DataFrame with sample_ids as index and phenotype values as single column without NAN values


.. py:function:: genotype_phenotype_matching(X, X_ids, y)

   Match the handed over genotype and phenotype matrix for the phenotype specified by the user
   :param X: genotype matrix in additive encoding
   :param X_ids: sample ids of genotype matrix
   :param y: pd.DataFrame containing sample ids of phenotype as index and phenotype values as single column
   :return: matched genotype matrix, matched sample ids, index arrays for genotype and phenotype to redo matching


.. py:function:: get_matched_data(data, index)

   Get elements of data specified in index array
   :param data: matrix or array
   :param index: index array
   :return: data at selected indices


.. py:function:: append_index_file(data_dir, genotype_matrix_name, phenotype_matrix_name, phenotype, datasplit, n_outerfolds, n_innerfolds, test_set_size_percentage, val_set_size_percentage, maf_percentage)

   Check index file, described in create_index_file(), and append datasets if necessary
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param phenotype_matrix_name: name of the phenotype matrix including datatype ending
   :param phenotype: name of the phenotype to predict
   :param maf_percentage: threshold for MAF filter as percentage value
   :param datasplit: datasplit to use. Options are: nested-cv, cv-test, train-val-test
   :param n_outerfolds: number of outerfolds relevant for nested-cv
   :param n_innerfolds: number of folds relevant for nested-cv and cv-test
   :param test_set_size_percentage: size of the test set relevant for cv-test and train-val-test
   :param val_set_size_percentage: size of the validation set relevant for train-val-test


.. py:function:: create_index_file(data_dir, genotype_matrix_name, phenotype_matrix_name, phenotype, datasplit, n_outerfolds, n_innerfolds, test_set_size_percentage, val_set_size_percentage, maf_percentage, X, y, sample_ids, X_index, y_index)

   Create the .h5 index file containing the maf filters and data splits for the combination of genotype matrix,
   phenotype matrix and phenotype.
   It will be created using standard values additionally to user inputs for the maf filters and data splits.
   Unified format of .h5 file containing the maf filters and data splits:
       'matched_data': {
               'y': matched phenotypic values,
               'matched_sample_ids': sample ids of matched genotype/phenotype,
               'X_index': indices of genotype matrix to redo matching,
               'y_index': indices of phenotype vector to redo matching,
               'ma_frequency': minor allele frequency of each SNP in genotype file to create new MAF filters
               }
       'maf_filter': {
               'maf_{maf_percentage}': indices of SNPs to delete (with MAF < maf_percentage),
               ...
               }
       'datasplits': {
               'nested_cv': {
                       '#outerfolds-#innerfolds': {
                               'outerfold_0': {
                                   'innerfold_0': {'train': indices_train, 'val': indices_val},
                                   ...
                                   'innerfold_n': {'train': indices_train, 'val': indices_val},
                                   'test': test_indices
                                   },
                               ...
                               'outerfold_m': {
                                   'innerfold_0': {'train': indices_train, 'val': indices_val},
                                   ...
                                   'innerfold_n': {'train': indices_train, 'val': indices_val},
                                   'test': test_indices
                                   }
                               },
                       ...
                       }
               'cv-test': {
                       '#folds-test_percentage': {
                               'outerfold_0': {
                                   'innerfold_0': {'train': indices_train, 'val': indices_val},
                                   ...
                                   'innerfold_n': {'train': indices_train, 'val': indices_val},
                                   'test': test_indices
                                   }
                               },
                       ...
                       }
               'train-val-test': {
                       'train_percentage-val_percentage-test_percentage': {
                               'outerfold_0': {
                                   'innerfold_0': {'train': indices_train, 'val': indices_val},
                                   'test': test_indices
                                   }
                               },
                       ...
                       }
               }

   Standard values for the maf filters and data splits:
       maf thresholds: 1, 3, 5
       folds (inner-/outerfolds for 'nested-cv' and folds for 'cv-test'): 5
       test percentage (for 'cv-test' and 'train-val-test'): 20
       val percentage (for 'train-val-test'): 20
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix_name: name of the genotype matrix including datatype ending
   :param phenotype_matrix_name: name of the phenotype matrix including datatype ending
   :param phenotype: name of the phenotype to predict
   :param maf_percentage: threshold for MAF filter as percentage value
   :param datasplit: datasplit to use. Options are: nested-cv, cv-test, train-val-test
   :param n_outerfolds: number of outerfolds relevant for nested-cv
   :param n_innerfolds: number of folds relevant for nested-cv and cv-test
   :param test_set_size_percentage: size of the test set relevant for cv-test and train-val-test
   :param val_set_size_percentage: size of the validation set relevant for train-val-test
   :param X: genotype in additive encoding to create ma-frequencies
   :param y: matched phenotype values
   :param sample_ids: matched sample ids of genotype/phenotype
   :param X_index: index file of genotype to redo matching
   :param y_index: index file of phenotype to redo matching


.. py:function:: filter_non_informative_snps(X)

   Remove non-informative SNPs, i.e. SNPs that are constant
   :param X: genotype matrix in raw or additive encoding
   :return: filtered genotype matrix and filter-vector


.. py:function:: get_minor_allele_freq(X)

   Compute minor allele frequencies of genotype matrix
   :param X: genotype matrix in additive encoding
   :return: array with frequencies


.. py:function:: create_maf_filter(maf, freq)

   Create minor allele frequency filter
   :param maf: maf threshold as percentage value
   :param freq: array containing minor allele frequencies as decimal value
   :return: array containing indices of SNPs with MAF smaller than specified threshold, i.e. SNPs to delete


.. py:function:: check_datasplit_user_input(user_datasplit, user_n_outerfolds, user_n_innerfolds, user_test_set_size_percentage, user_val_set_size_percentage, datasplit, param_to_check)

   Check if user input of data split parameters differs from standard values.
   If it does, add input to list of parameters
   :param user_datasplit: datasplit specified by the user
   :param user_n_outerfolds: number of outerfolds relevant for nested-cv specified by the user
   :param user_n_innerfolds: number of folds relevant for nested-cv and cv-test specified by the user
   :param user_test_set_size_percentage:
       size of the test set relevant for cv-test and train-val-test specified by the user
   :param user_val_set_size_percentage: size of the validation set relevant for train-val-test specified by the user
   :param datasplit: type of data split
   :param param_to_check: standard parameters to compare to
   :return: adapted list of parameters


.. py:function:: check_train_test_splits(y, datasplit, datasplit_params)

   Create stratified train-test splits. Continuous values will be grouped into bins and stratified according to those
   :param datasplit: type of datasplit ('nested-cv', 'cv-test', 'train-val-test')
   :param y: array with phenotypic values for stratification
   :param datasplit_params: parameters to use for split:
       [n_outerfolds, n_innerfolds] for nested-cv
       [n_innerfolds, test_set_size_percentage] for cv-test
       [val_set_size_percentage, test_set_size_percentage] for train-val-test
   :return: dictionary respectively arrays with indices


.. py:function:: make_bins(y, datasplit, datasplit_params)

   Create bins of continuous values for stratification
   :param y: array containing phenotypic values
   :param datasplit: train test split to use
   :param datasplit_params: list of parameters to use:
       [n_outerfolds, n_innerfolds] for nested-cv
       [n_innerfolds, test_set_size_percentage] for cv-test
       [val_set_size_percentage, test_set_size_percentage] for train-val-test
   :return: binned array


.. py:function:: make_nested_cv(y, outerfolds, innerfolds)

   Create index dictionary for stratified nested cross validation with the following structure:
       {'outerfold_0_test': test_indices,
       'outerfold_0': {fold_0_train: innerfold_0_train_indices,
                       fold_0_test: innerfold_0_test_indices,
                       ...
                       fold_n_train: innerfold_n_train_indices,
                       fold_n_test: innerfold_n_test_indices
                       },
       ...
       'outerfold_m_test': test_indices,
       'outerfold_m': {fold_0_train: innerfold_0_train_indices,
                       fold_0_test: innerfold_0_test_indices,
                       ...
                       fold_n_train: innerfold_n_train_indices,
                       fold_n_test: innerfold_n_test_indices
                       }
       }
   :param y: target values grouped in bins for stratification
   :param outerfolds: number of outer folds
   :param innerfolds: number of inner folds
   :return: index dictionary


.. py:function:: make_stratified_cv(x, y, split_number)

   Create index dictionary for stratified cross-validation with following structure:
       {fold_0_train: fold_0_train_indices,
       fold_0_test: fold_0_test_indices,
       ...
       fold_n_train: fold_n_train_indices,
       fold_n_test: fold_n_test_indices
       }
   :param x: whole train indices
   :param y: target values binned in groups for stratification
   :param split_number: number of folds
   :return: dictionary containing train and validation indices for each fold


.. py:function:: make_train_test_split(y, test_size, val_size=None, val=False, random=42)

   Create index arrays for stratified train-test, respectively train-val-test splits.
   :param y: target values grouped in bins for stratification
   :param test_size: size of test set as percentage value
   :param val_size: size of validation set as percentage value
   :param val: if True, function returns validation set additionally to train and test set
   :param random: controls shuffling of data
   :return: either train, val and test index arrays or
               train and test index arrays and corresponding binned target values


