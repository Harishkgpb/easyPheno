:py:mod:`optimization.optuna_optim`
===================================

.. py:module:: optimization.optuna_optim


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   optimization.optuna_optim.OptunaOptim




.. py:class:: OptunaOptim(save_dir, genotype_matrix_name, phenotype_matrix_name, phenotype, n_outerfolds, n_innerfolds, val_set_size_percentage, test_set_size_percentage, maf_percentage, n_trials, save_final_model, batch_size, n_epochs, task, current_model_name, dataset, start_time)

   Class that contains all info for the whole optimization using optuna for one model and dataset.

   ## Attributes ##
       task: str : ML task (regression or classification) depending on target variable
       current_model_name: str : name of the current model according to naming of .py file in package model
       dataset: base_dataset.Dataset : dataset to use for optimization run
       datasplit_subpath: str : subpath with datasplit info relevant for saving / naming
       base_path : str : base_path for save_path
       save_path: str : path for model and results storing
       study : optuna.study.Study : optuna study for optimization run
       current_best_val_result: float : the best validation result so far
       early_stopping_point: int : point at which early stopping occured (relevant for some models)
       user_input_params: dict : all params handed over to the constructor that are needed in the whole class

   .. py:method:: create_new_study(self)

      Create a new optuna study.
      :return: optuna study


   .. py:method:: objective(self, trial, train_val_indices)

      Objective function for optuna optimization that returns a score
      :param trial: trial of optuna for optimization
      :param train_val_indices: indices of train and validation sets
      :return: score of the current hyperparameter config


   .. py:method:: clean_up_after_exception(self, trial_number, trial_params)

      Clean up things after an exception: delete unfitted model if it exists and update runtime csv
      :param trial_number: number of the trial
      :param trial_params: parameters of the trial


   .. py:method:: write_runtime_csv(self, dict_runtime)

      Write runtime info to runtime csv file
      :param dict_runtime: Dictionary with runtime information


   .. py:method:: calc_runtime_stats(self)

      Calculate runtime stats for saved csv file.
      :return: dict with runtime info


   .. py:method:: run_optuna_optimization(self)

      Function to run whole optuna optimization for one model, dataset and datasplit.



