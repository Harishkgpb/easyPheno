:py:mod:`easyPheno`
===================

.. py:module:: easyPheno


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   easyPheno.run_pipeline



Attributes
~~~~~~~~~~

.. autoapisummary::

   easyPheno.parser


.. py:function:: run_pipeline(data_dir, genotype_matrix, phenotype_matrix, phenotype, encoding = None, maf_percentage = 0, save_dir = None, datasplit = 'nested-cv', n_outerfolds = 5, n_innerfolds = 5, test_set_size_percentage = 20, val_set_size_percentage = 20, models = None, n_trials = 100, save_final_model = False, batch_size = 32, n_epochs = None)

   Run the whole optimization pipeline
   :param data_dir: data directory where the phenotype and genotype matrix are stored
   :param genotype_matrix: name of the genotype matrix including datatype ending
   :param phenotype_matrix: name of the phenotype matrix including datatype ending
   :param phenotype: name of the phenotype to predict
   :param encoding: encoding to use. Default is None, so standard encoding of each model will be used
   :param maf_percentage: threshold for MAF filter as percentage value. Default is 0, so no MAF filtering
   :param save_dir: directory for saving the results. Default is None, so same directory as data_dir
   :param datasplit: datasplit to use. Options are: nested-cv, cv-test, train-val-test
   :param n_outerfolds: number of outerfolds relevant for nested-cv
   :param n_innerfolds: number of folds relevant for nested-cv and cv-test
   :param test_set_size_percentage: size of the test set relevant for cv-test and train-val-test
   :param val_set_size_percentage: size of the validation set relevant for train-val-test
   :param models: list of models that should be optimized
   :param n_trials: number of trials for optuna
   :param save_final_model: specify if the final model should be saved
   :param batch_size: batch size for neural network models
   :param n_epochs: number of epochs for neural network models


.. py:data:: parser
   

   

