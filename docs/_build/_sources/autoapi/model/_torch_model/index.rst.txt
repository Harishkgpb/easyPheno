:py:mod:`model._torch_model`
============================

.. py:module:: model._torch_model


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   model._torch_model.TorchModel




.. py:class:: TorchModel(task, optuna_trial, encoding = None, n_outputs = 1, n_features = None, width_onehot = None, batch_size = None, n_epochs = None)

   Bases: :py:obj:`model._base_model.BaseModel`, :py:obj:`abc.ABC`

   Parent class based on BaseModel for all PyTorch models to share functionalities.
   See BaseModel for more information.

   ## Attributes ##
       # Inherited attributes #
       See BaseModel.
       # Additional attributes #
       n_outputs: int : Number of outputs of the model
       n_features: int : Number of input features to the model
       width_onehot: int : Number of input channels in case of onehot encoding
       batch_size: int : Batch size for batch-based training
       n_epochs: int : Number of epochs for optimization
       optimizer: torch.optim.optimizer.Optimizer : optimizer for model fitting
       loss_fn : loss function for model fitting
       early_stopping_patience: int : epochs without improvement before early stopping
       early_stopping_point: int : epoch at which early stopping occured
       device: torch.device : device to use

   .. py:method:: train_val_loop(self, X_train, y_train, X_val, y_val)

      Implementation of a train and validation loop for  PyTorch models.
      See BaseModel for more information


   .. py:method:: train_one_epoch(self, train_loader)

      Train one epoch
      :param train_loader: DataLoader with training data


   .. py:method:: validate_one_epoch(self, val_loader)

      Validate one epoch
      :param val_loader: DataLoader with validation data
      :return: loss based on loss-criterion


   .. py:method:: retrain(self, X_retrain, y_retrain)

      Implementation of the retraining for PyTorch models.
      See BaseModel for more information


   .. py:method:: predict(self, X_in)

      Implementation of a prediction based on input features for PyTorch models.
      See BaseModel for more information


   .. py:method:: get_loss(self, outputs, targets)

      Calculate the loss based on the outputs and targets
      :param outputs: outputs of the model
      :param targets: targets of the dataset
      :return: loss


   .. py:method:: get_dataloader(self, X, y = None, shuffle = True)

      Get a Pytorch DataLoader using the specified data and batch size
      :param X: feature matrix to use
      :param y: optional target vector to use
      :param shuffle: shuffle parameter for DataLoader
      :return: Pytorch DataLoader


   .. py:method:: common_hyperparams()
      :staticmethod:

      Add hyperparameters that are common for PyTorch models.
      Do not need to be included in optimization for every child model.
      Also see BaseModel for more information


   .. py:method:: get_torch_object_for_string(string_to_get)
      :staticmethod:



