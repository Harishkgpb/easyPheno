:py:mod:`model.cnn`
===================

.. py:module:: model.cnn


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   model.cnn.Cnn




.. py:class:: Cnn(task, optuna_trial, encoding = None, n_outputs = 1, n_features = None, width_onehot = None, batch_size = None, n_epochs = None)

   Bases: :py:obj:`model._torch_model.TorchModel`

   Parent class based on BaseModel for all PyTorch models to share functionalities.
   See BaseModel for more information.

   ## Attributes ##
       # Inherited attributes #
       See BaseModel.
       # Additional attributes #
       n_outputs: int : Number of outputs of the model
       n_features: int : Number of input features to the model
       width_onehot: int : Number of input channels in case of onehot encoding
       batch_size: int : Batch size for batch-based training
       n_epochs: int : Number of epochs for optimization
       optimizer: torch.optim.optimizer.Optimizer : optimizer for model fitting
       loss_fn : loss function for model fitting
       early_stopping_patience: int : epochs without improvement before early stopping
       early_stopping_point: int : epoch at which early stopping occured
       device: torch.device : device to use

   .. py:attribute:: standard_encoding
      :annotation: = onehot

      

   .. py:attribute:: possible_encodings
      :annotation: = ['onehot']

      

   .. py:method:: define_model(self)

      Definition of a CNN network.
      See BaseModel and TorchModel for more information.

      Architecture:
          - N_LAYERS of (Conv1d + BatchNorm + Dropout + MaxPool1d)
          - Flatten, Linear, BatchNorm, Dropout
          - Linear output layer
          Kernel sizes for convolutional and max pooling layers may be fixed or optimized.
          Same applies for strides, number of output channels of the first convolutional layer,
          frequency of a doubling of the output channels and number of units in the first linear layer.


   .. py:method:: define_hyperparams_to_tune(self)

      See BaseModel for more information on the format.
      See TorchModel for more information on hyperparameters common for all torch models.



