:py:mod:`utils.helper_functions`
================================

.. py:module:: utils.helper_functions


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   utils.helper_functions.get_list_of_implemented_models
   utils.helper_functions.test_likely_categorical
   utils.helper_functions.get_mapping_name_to_class
   utils.helper_functions.set_all_seeds
   utils.helper_functions.get_subpath_for_datasplit
   utils.helper_functions.save_model_overview_dict
   utils.helper_functions.sort_models_by_encoding



.. py:function:: get_list_of_implemented_models()

   Create a list of all implemented models based on files existing in 'model' subdirectory of the repository.


.. py:function:: test_likely_categorical(vector_to_test, abs_unique_threshold = 20)

   Test whether a vector is most likely categorical.
   Simple heuristics:
       checking if the number of unique values exceeds a specified threshold
   :param vector_to_test: vector that is tested if it is most likely categorical
   :param abs_unique_threshold: threshold of unique values' ratio to declare vector categorical
   :return: True if the vector is most likely categorical, False otherwise


.. py:function:: get_mapping_name_to_class()

   Get a mapping from model name (naming in package model without .py) to class name.
   :return: dictionary with mapping model name to class name


.. py:function:: set_all_seeds(seed = 42)

   Set all seeds of libs with a specific function for reproducibility of results
   :param seed: seed to use


.. py:function:: get_subpath_for_datasplit(datasplit, datasplit_params)

   Construct the subpath according to the datasplit
   :param datasplit: datasplit to retrieve
   :param datasplit_params: parameters to use for the specific datasplit
       - nested-cv: [n_outerfolds, n_innerfolds]
       - cv-test: [n_innerfolds, test_set_size_percentage]
       - train-val-test: [val_set_size_percentage, train_set_size_percentage]
   :return: string with the subpath


.. py:function:: save_model_overview_dict(model_overview, save_path)

   Structure and save results of a whole optimization run for multiple models in one csv file
   :param model_overview: dictionary with results overview
   :param save_path: filepath for saving the results overview file


.. py:function:: sort_models_by_encoding(models_list)

   Sort models by the encoding that will be used
   :param models_list: unsorted list of models
   :return: list of models sorted by encoding


